package linkedList;

public class LinkedListImpl implements LinkedList {

	@Override
	public Node add(Node head, int value) {
		Node node = new Node(value);
		if(head == null) {
			head  = node;
			head.setNext(null);
		} else {
			Node temp = head;
			while(temp.getNext() != null) {
				temp = temp.getNext();
			}
			temp.setNext(node);
		}
		return head;
	}

	@Override
	public Node addBefore(Node head, int value, int beforeValue) {
		Node node = new Node(value);
		Node temp = head;
		try {
			while(temp.getNext().getData() != beforeValue) {
				temp = temp.getNext();
			}
			node.setNext(temp.getNext());
			temp.setNext(node);
		} catch(Exception e) {
			System.out.println("Exception while adding a node before position: " + beforeValue);
			throw e;
		}
		return head;
	}

	@Override
	public Node remove(Node head, Node node) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node removeAtPosition(Node head, int position)
			throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node addFirst(Node head, int value) {
		Node node = new Node(value);
		node.setNext(head);
		return node;
	}

	@Override
	public Node reverse(Node head) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node recursiveReverse(Node head) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int peek(Node head) {
		return head.getData();
	}

	@Override
	public Node getNodeAtPosition(int position)
			throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	
}
